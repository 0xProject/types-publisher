"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path = require("path");
const fs_1 = require("fs");
const fsp = require("fs-promise");
const sourceMapSupport = require("source-map-support");
const io_1 = require("../util/io");
const util_1 = require("../util/util");
sourceMapSupport.install();
if (process.env.LONGJOHN) {
    console.log("=== USING LONGJOHN ===");
    const longjohn = require("longjohn");
    longjohn.async_trace_limit = -1; // unlimited
}
exports.home = path.join(__dirname, "..", "..");
exports.settings = util_1.parseJson(fs_1.readFileSync(path.join(exports.home, "settings.json"), "utf-8"));
var Options;
(function (Options) {
    Options.defaults = {
        definitelyTypedPath: "../DefinitelyTyped",
    };
})(Options = exports.Options || (exports.Options = {}));
function readDataFile(generatedBy, fileName) {
    return readFileAndWarn(generatedBy, dataFilePath(fileName));
}
exports.readDataFile = readDataFile;
/** If a file doesn't exist, warn and tell the step it should have bene generated by. */
function readFileAndWarn(generatedBy, filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield io_1.readJson(filePath);
        }
        catch (e) {
            console.error(`Run ${generatedBy} first!`);
            throw e;
        }
    });
}
exports.readFileAndWarn = readFileAndWarn;
function writeDataFile(filename, content, formatted = true) {
    return __awaiter(this, void 0, void 0, function* () {
        yield fsp.ensureDir(dataDir);
        yield io_1.writeJson(dataFilePath(filename), content, formatted);
    });
}
exports.writeDataFile = writeDataFile;
const dataDir = path.join(exports.home, "data");
function dataFilePath(filename) {
    return path.join(dataDir, filename);
}
//# sourceMappingURL=common.js.map